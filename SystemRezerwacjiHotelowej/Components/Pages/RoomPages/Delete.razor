@page "/rooms/delete"
@inject SystemRezerwacjiHotelowej.Data.ApplicationDbContext DB
@using SystemRezerwacjiHotelowej.Components
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<h3>Are you sure you want to delete this?</h3>
<div>
    <h4>Room</h4>
    <hr />
    @if (room is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Numer</dt>
            <dd class="col-sm-10">@room.Numer</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Pietro</dt>
            <dd class="col-sm-10">@room.Pietro</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">IloscOsob</dt>
            <dd class="col-sm-10">@room.IloscOsob</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">CenaZaDobe</dt>
            <dd class="col-sm-10">@room.CenaZaDobe</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Standard</dt>
            <dd class="col-sm-10">@room.Standard</dd>
        </dl>
        <EditForm method="post" Model="room" OnValidSubmit="DeleteRoom" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(room is null)">Delete</button> |
            <a href="/rooms">Back to List</a>
        </EditForm>
    }
</div>

@code {
    Room? room;

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        room = await DB.Room.FirstOrDefaultAsync(m => m.Id == Id);

        if (room is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task DeleteRoom()
    {
        DB.Room.Remove(room!);
        await DB.SaveChangesAsync();
        NavigationManager.NavigateTo("/rooms");
    }
}
